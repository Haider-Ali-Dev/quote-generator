{"version":3,"sources":["components/Card.js","container/App.js","reportWebVitals.js","index.js"],"names":["Card","className","this","props","author","quote","onClick","newQuote","Component","getRandomInt","min","max","Math","ceil","floor","random","index","App","state","getNext","bind","fetch","then","res","json","data","setState","text","buttonIndex","console","log","length","style","textAlign","class","React","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gPAsBeA,E,4JAhBX,WACI,OACI,sBAAKC,UAAU,2EAAf,UACI,oBAAMA,UAAU,YAAhB,SAA6BC,KAAKC,MAAMC,SACxC,gCACI,mBAAGH,UAAU,QAAb,SAAsBC,KAAKC,MAAME,QACjC,wBAAQC,QAASJ,KAAKC,MAAMI,SAAUN,UAAU,iDAAhD,kC,GAPDO,aCCnB,SAASC,EAAaC,EAAKC,GAGzB,OAFAD,EAAME,KAAKC,KAAKH,GAChBC,EAAMC,KAAKE,MAAMH,GACVC,KAAKE,MAAMF,KAAKG,UAAYJ,EAAMD,EAAM,IAAMA,EAGvD,IAAIM,EAAQP,EAAa,EAAG,KAuDbQ,E,kDApDb,WAAYd,GAAQ,IAAD,8BACjB,cAAMA,IACDe,MAAQ,CACXb,MAAQ,GACRD,OAAQ,IAEV,EAAKe,QAAU,EAAKA,QAAQC,KAAb,gBANE,E,qDAUnB,WAAoB,IAAD,OACjBC,MAAM,+BACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAI,OAAI,EAAKC,SAAS,CAACrB,MAAQoB,EAAKT,GAAOW,KAAMvB,OAASqB,EAAKT,GAAOZ,c,qBAG9E,WAAW,IAAD,OACJwB,EAAcnB,EAAa,IAAK,KACpCY,MAAM,+BACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAI,OAAI,EAAKC,SAAS,CAACrB,MAAQoB,EAAKG,GAAaD,KAAMvB,OAASqB,EAAKG,GAAaxB,YACxFyB,QAAQC,IAAI,K,oBAKd,WAEE,MAA0B5B,KAAKgB,MAAvBb,EAAR,EAAQA,MAAOD,EAAf,EAAeA,OACf,OAAKC,EAAM0B,OAQP,gCACE,oBAAI9B,UAAU,+BAA+B+B,MAAO,CAACC,UAAY,UAAjE,6BACA,cAAC,EAAD,CAAM5B,MAAOA,EAAOD,OAAQA,EAAQG,SAAUL,KAAKiB,UACjD,wBAAQlB,UAAU,yCAAlB,SACE,wBAAOA,UAAU,WAAjB,uBAAmC,mBAAGiC,MAAM,MAAT,wBAAnC,iCAVN,8BACE,oBAAIF,MAAO,CAACC,UAAY,UAAxB,2B,GAjCQE,IAAM3B,WCFT4B,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.bbcc71f7.chunk.js","sourcesContent":["import { Component } from \"react\";\r\nimport React from 'react';\r\n\r\n// import tailwindcss from \"tailwindcss\";\r\n\r\nclass Card extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"mw5 mw7-ns center bg-light-blue pa3 ph5-ns br3 pa3 ma2 grow bw2 shadow-5\">\r\n                <h1   className=\"underline\">{this.props.author}</h1>\r\n                <div>\r\n                    <p className=\"i fw8\">{this.props.quote}</p>\r\n                    <button onClick={this.props.newQuote} className=\"f6 link dim ph3 pv2 mb2 dib white bg-black br4\">Next Quote</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    \r\n}\r\n\r\n\r\nexport default Card;\r\n\r\n\r\n// bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5","// import logo from './logo.svg';\nimport './App.css';\nimport Card from '../components/Card';\nimport React from 'react';\n\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nlet index = getRandomInt(0, 1000)\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      quote : [],\n      author: []\n    };\n    this.getNext = this.getNext.bind(this)\n\n  }\n\n  componentDidMount(){\n    fetch('https://type.fit/api/quotes')\n    .then(res => res.json())\n    .then(data => this.setState({quote : data[index].text, author : data[index].author}))\n  }\n\n  getNext() {\n    let buttonIndex = getRandomInt(100, 1000)\n    fetch('https://type.fit/api/quotes')\n    .then(res => res.json())\n    .then(data => this.setState({quote : data[buttonIndex].text, author : data[buttonIndex].author}))\n    console.log(1)\n  }\n\n\n\n  render() {\n\n    const { quote, author } = this.state;\n    if (!quote.length) {\n      return (\n        <div>\n          <h1 style={{textAlign : 'center'}}>Loading</h1>\n        </div>\n      )\n    } else {\n        return (\n        <div>\n          <h1 className=\"f1 ttu tracked mt0 underline\" style={{textAlign : 'center'}}>Quote Generator</h1>\n          <Card quote={quote} author={author} newQuote={this.getNext}/>\n            <footer className=\"pv4 ph3 ph5-m ph6-l mid-gray underline\">\n              <small className=\"f6 db tc\">Â© 2021 <b class=\"ttu\">Haider Ali</b>., All Rights Reserved</small>\n            </footer>\n        </div>\n        \n    \n      );\n    }\n    \n  }\n}\n\nexport default App;\n\n//https://api.chucknorris.io/jokes/random\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './container/App';\nimport 'tachyons';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}