{"version":3,"sources":["components/Card.js","components/MakeQuote.js","container/App.js","reportWebVitals.js","index.js"],"names":["Card","className","this","props","author","quote","onClick","newQuote","Component","MakeQuote","name","style","resize","rows","cols","onChange","formFucn","type","placeholder","wordWrap","data","button","reset","getRandomInt","min","max","Math","ceil","floor","random","index","App","resetButton","setState","yourQuote","state","getNext","bind","getFormValue","onFormPress","fetch","then","res","json","text","buttonIndex","console","log","event","target","value","preventDefault","length","textAlign","React","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.930c94ee.chunk.js","sourcesContent":["import { Component } from \"react\";\r\nimport React from 'react';\r\n\r\n// import tailwindcss from \"tailwindcss\";\r\n\r\nclass Card extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"mw5 mw7-ns center bg-light-blue pa3 ph5-ns br3 pa3 ma2 grow bw2 shadow-5\">\r\n                <h1   className=\"underline\">{this.props.author}</h1>\r\n                <div>\r\n                    <p className=\"i fw8\">{this.props.quote}</p>\r\n                    <button onClick={this.props.newQuote} className=\"f6 link dim ph3 pv2 mb2 dib white bg-black br4\">Next Quote</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    \r\n}\r\n\r\n\r\nexport default Card;\r\n\r\n\r\n// bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5","import React from 'react';\r\n\r\nconst MakeQuote = (props) => {\r\n    return(\r\n        <div className=\"mw5 mw7-ns center bg-light-purple pa4 ph5-ns br3 pa3 ma4 grow bw2 shadow-5\">\r\n            <h1 className=\"tc underline\">Quote Maker</h1>\r\n            <form>\r\n                <label>\r\n                    <textarea name=\"text\" style={{resize: 'vertical'}} rows=\"2\" cols=\"25\" onChange={props.formFucn} type=\"text\" placeholder=\"Type Your Quote\"/> \r\n                </label>\r\n                \r\n            </form>\r\n            <div>\r\n                <h1>Your Quote:</h1>\r\n                <p style={{ wordWrap: 'break-word' }} className=\"i fw8 lh-copy\">{props.data}</p>\r\n                <button className=\"f6 link dim ph3 pv2 mb2 dib white bg-green br4 mr3\" type=\"button\" onClick={props.button}>Add Quotation Mark</button>\r\n                <button onClick={props.reset} className=\"f6 link dim ph3 pv2 mb2 dib white bg-red br4 ml3\" type=\"reset\">Reset</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MakeQuote;","// import logo from './logo.svg';\nimport './App.css';\nimport Card from '../components/Card';\nimport React from 'react';\nimport MakeQuote from '../components/MakeQuote';\n\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nlet index = getRandomInt(0, 1000)\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      quote : [],\n      author: [],\n      yourQuote : 'None',\n    };\n    this.getNext = this.getNext.bind(this)\n    this.getFormValue = this.getFormValue.bind(this);\n    this.onFormPress = this.onFormPress.bind(this);\n    this.resetButton = this.resetButton.bind(this);\n\n  }\n\n  componentDidMount(){\n    fetch('https://type.fit/api/quotes')\n    .then(res => res.json())\n    .then(data => this.setState({quote : data[index].text, author : data[index].author}))\n  }\n\n  getNext() {\n    let buttonIndex = getRandomInt(100, 1000)\n    fetch('https://type.fit/api/quotes')\n    .then(res => res.json())\n    .then(data => this.setState({quote : data[buttonIndex].text, author : data[buttonIndex].author}))\n    console.log(1)\n  }\n\n  getFormValue(event) {\n    this.setState({yourQuote : event.target.value})\n  }\n\n  onFormPress(event) {\n    const { yourQuote } = this.state;\n    this.setState({yourQuote : `\"${yourQuote}\"`})\n    event.preventDefault()\n  }\n\n  resetButton = () => {\n    this.setState({yourQuote : 'None'})\n  }\n\n\n\n  render() {\n\n    const { quote, author } = this.state;\n    if (!quote.length) {\n      return (\n        <div>\n          <h1 style={{textAlign : 'center'}}>Loading</h1>\n        </div>\n      )\n    } else {\n        return (\n        <div>\n          <h1 className=\"f1 ttu tracked mt0 underline\" style={{textAlign : 'center'}}>Quote Generator</h1>\n          <Card quote={quote} author={author} newQuote={this.getNext}/>\n          <MakeQuote formFucn={this.getFormValue} button={this.onFormPress} data={this.state.yourQuote} reset={this.resetButton}/>\n            <footer className=\"pv4 ph3 ph5-m ph6-l mid-gray underline\">\n              <small className=\"f6 db tc\">Â© 2021 <b className=\"ttu\">Haider Ali</b>., All Rights Reserved</small>\n            </footer>\n        </div>\n        \n    \n      );\n    }\n    \n  }\n}\n\nexport default App;\n\n//https://api.chucknorris.io/jokes/random\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './container/App';\nimport 'tachyons';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}